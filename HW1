from search import PriorityQueue, memoize, Node

def best_first_graph_search(problem, f):
    """Search the nodes with the lowest f scores first.
    You specify the function f(node) that you want to minimize; for example,
    if f is a heuristic estimate to the goal, then we have greedy best
    first search; if f is node.depth then we have breadth-first search.
    There is a subtlety: the line "f = memoize(f, 'f')" means that the f
    values will be cached on the nodes as they are computed. So after doing
    a best first search you can examine the f values of the path returned."""
    
    # we use these two variables at the time of visualisations
    iterations = 0
    all_node_colors = []
    node_colors = dict(initial_node_colors)
    
    f = memoize(f, 'f')
    node = Node(problem.initial)
    
    node_colors[node.state] = "red"
    iterations += 1
    all_node_colors.append(dict(node_colors))
    
    if problem.goal_test(node.state):
        node_colors[node.state] = "green"
        iterations += 1
        all_node_colors.append(dict(node_colors))
        return(iterations, all_node_colors, node)
    
    frontier = PriorityQueue(min, f)
    frontier.append(node)
    
    node_colors[node.state] = "orange"
    iterations += 1
    all_node_colors.append(dict(node_colors))
    
    explored = set()
    while frontier:
        node = frontier.pop()
        
        node_colors[node.state] = "red"
        iterations += 1
        all_node_colors.append(dict(node_colors))
        
        if problem.goal_test(node.state):
            node_colors[node.state] = "green"
            iterations += 1
            all_node_colors.append(dict(node_colors))
            return(iterations, all_node_colors, node)
        
        explored.add(node.state)
        for child in node.expand(problem):
            if child.state not in explored and child not in frontier:
                frontier.append(child)
                node_colors[child.state] = "orange"
                iterations += 1
                all_node_colors.append(dict(node_colors))
            elif child in frontier:
                incumbent = frontier[child]
                if f(child) < f(incumbent):
                    del frontier[incumbent]
                    frontier.append(child)
                    node_colors[child.state] = "orange"
                    iterations += 1
                    all_node_colors.append(dict(node_colors))

        node_colors[node.state] = "gray"
        iterations += 1
        all_node_colors.append(dict(node_colors))
    return None

def uniform_cost_search(start_state, goal_states, graph, edge_costs):
    """Uniform Cost Search"""
    class GraphProblem:
        def __init__(self, initial, goal, graph, costs):
            self.initial = initial
            self.goal = goal
            self.graph = graph
            self.costs = costs

        def actions(self, state):
            return list(self.graph[state].keys())

        def result(self, state, action):
            return action

        def path_cost(self, cost_so_far, state1, action, state2):
            return cost_so_far + self.costs[(state1, state2)]

        def goal_test(self, state):
            return state in self.goal
    
    problem = GraphProblem(start_state, goal_states, graph, edge_costs)
    iterations, all_node_colors, node = best_first_graph_search(problem, lambda node: node.path_cost)
    return iterations, all_node_colors, node

# Example usage:
graph = {
    0: {1: 2, 2: 4},
    1: {3: 5, 4: 2},
    2: {4: 1, 5: 3},
    3: {6: 7},
    4: {6: 6},
    5: {7: 10},
    6: {7: 2},
    7: {}
}

edge_costs = {
    (0, 1): 2,
    (0, 2): 4,
    (1, 3): 5,
    (1, 4): 2,
    (2, 4): 1,
    (2, 5): 3,
    (3, 6): 7,
    (4, 6): 6,
    (5, 7): 10,
    (6, 7): 2
}

start_state = 0
goal_states = [7]

iterations, all_node_colors, node = uniform_cost_search(start_state, goal_states, graph, edge_costs)
if iterations is not None:
    print("Minimum cost to reach goal state:", node.path_cost)
else:
    print("No path to goal state found.")
